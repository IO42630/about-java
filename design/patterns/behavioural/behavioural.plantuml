@startuml

title __BEHAVIOURAL's Class Diagram__\n

  namespace patterns.behavioural {
    interface patterns.behavioural.Aggregate {
        {abstract} + createIterator()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ChainofResponsibility {
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Command {
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ConcreteAggregate {
        + array : Object[]
        + createIterator()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ConcreteIterator {
        - position : int
        + isDone()
        + next()
        ~ ConcreteIterator()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ConcreteObserver {
        + state : int
        + Update()
        ~ ConcreteObserver()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ConcreteSubject {
        - state : int
        + GetState()
        + SetState()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.CreditCardStrategy {
        + excecute()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Element {
        + accept()
        + print()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Interpreter {
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Item {
        - price : int
        + Item()
        + paywith()
    }
  }
  

  namespace patterns.behavioural {
    interface patterns.behavioural.Iterator {
        {abstract} + isDone()
        {abstract} + next()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.IteratorDemo {
        {static} + main()
    }
  }
  

  namespace patterns.behavioural {
    abstract class patterns.behavioural.Lvl1 {
        + solve()
        # step1()
        {abstract} # step2()
        # step3()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Lvl2 {
        # step2()
        # step3()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Mediator {
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Memento {
    }
  }
  

  namespace patterns.behavioural {
    abstract class patterns.behavioural.Observer {
        {abstract} + Update()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.ObserverDemo {
        {static} + main()
    }
  }
  

  namespace patterns.behavioural {
    interface patterns.behavioural.PaymentStrategy {
        {abstract} + excecute()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.PaypalStrategy {
        + excecute()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.State {
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.StrategyDemo {
        {static} + main()
    }
  }
  

  namespace patterns.behavioural {
    abstract class patterns.behavioural.Subject {
        - observers : List<Observer>
        + Attach()
        + Detach()
        + Notify()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.TemplateMethodDemo {
        {static} + main()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.Visitor {
        + visit()
    }
  }
  

  namespace patterns.behavioural {
    class patterns.behavioural.VisitorDemo {
        {static} + main()
    }
  }
  

  patterns.behavioural.ConcreteAggregate .up.|> patterns.behavioural.Aggregate
  patterns.behavioural.ConcreteIterator .up.|> patterns.behavioural.Iterator
  patterns.behavioural.ConcreteIterator o-- patterns.behavioural.ConcreteAggregate : aggregate
  patterns.behavioural.ConcreteObserver -up-|> patterns.behavioural.Observer
  patterns.behavioural.ConcreteObserver o-- patterns.behavioural.ConcreteSubject : subject
  patterns.behavioural.ConcreteSubject -up-|> patterns.behavioural.Subject
  patterns.behavioural.CreditCardStrategy .up.|> patterns.behavioural.PaymentStrategy
  patterns.behavioural.Lvl2 -up-|> patterns.behavioural.Lvl1
  patterns.behavioural.PaypalStrategy .up.|> patterns.behavioural.PaymentStrategy


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
